<section>
    <div class="container mt-5">
        <form action="/admin/edit-product/{{Products._id}}" id="formdsub"
            class="row g-3 mx-auto mt-3 col-md-12 col-sm-12 col-12" style="width: 700px;" enctype="multipart/form-data"
            method="post">
            <h2 class="text-center fw-bold">Edit Product</h2>
            <div class="col-md-6">

                <label for="inputEmail4" class="form-label">Product name</label>
                <input type="text" name="name" class="form-control" id="name" value="{{Products.name}}">
            </div>
            <div class="col-md-4">
                <label for="inputPassword4" class="form-label">Price</label>
                <input type="number" name="price" class="form-control" id="inputPassword4" placeholder="RS:"
                    value="{{Products.price}}">
            </div>

            <div class="col-md-5">
                <label for="inputState" class="form-label">Category</label>
                <select id="inputState" class="form-select" name="category1">
                    {{#each category}}
                    <option>{{this.category}}</option>
                    {{/each}}

                </select>
            </div>

            <div class="col-md-5">
                <label for="inputState" class="form-label">Category</label>
                <select id="inputState" class="form-select" name="category2">
                    {{#each Subcategory}}
                    <option>{{this}}</option>
                    {{/each}}

                </select>
            </div>

            <div class="col-7">
                <label for="inputAddress" class="form-label">Description</label>
                <input type="text" class="form-control" id="inputAddress" name="description"
                    value="{{Products.description}}">
            </div>

            <div class="col-md-3">
                <label for="inputAddress" class="form-label">Count</label>
                <input type="number" name="count" class="form-control" id="inputBox" name="description"
                    value="{{Products.count}}">
            </div>

            <div class="mb-3 col-9">
                <img src="/images/{{Products.image.[0]}}" id="imgView1" alt="" style="width:100px">
                <input type="file" id="id_image1" name="image" accept="image/*" value="/images/{{Products.image.[0]}}" onchange="viewImage1(event)"><br>
                <div id="image-box1" class="image-container"></div>
                <button class="btn btn-outline-info" id="crop-btn1"
                    style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>

            </div>
            <div class="mb-3 col-9">
                <img src="/images/{{Products.image.[1]}}" id="imgView2" alt="" style="width:100px">
                <input type="file" id="id_image2" name="image" accept="image/*"  value="/images/{{Products.image.[1]}}" onchange="viewImage2(event)"> <br>
                <div id="image-box2" class="image-container"></div>
                <button class="btn btn-outline-info" id="crop-btn2"
                    style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>

            </div>
            <div class="mb-3 col-9">
                <img src="/images/{{Products.image.[2]}}" id="imgView3" alt="" style="width:100px">
                <input type="file" id="id_image3" name="image" accept="image/*"  value="/images/{{Products.image.[2]}}" onchange="viewImage3(event)"><br>
                <div id="image-box3" class="image-container"></div>
                <button class="btn btn-outline-info" id="crop-btn3"
                    style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>
            </div>
            <div class="mb-3 col-9">
                <img src="/images/{{Products.image.[3]}}" id="imgView4" alt="" style="width:100px">
                <input type="file" id="id_image4" name="image" accept="image/*"  value="/images/{{Products.image.[3]}}" onchange="viewImage4(event)"><br>
                <div id="image-box4" class="image-container"></div>
                <button class="btn btn-outline-info" id="crop-btn4"
                    style="width: 100%; margin-top: 10px; display: none;" type="button">Crop</button>
            </div>

            <div class="col-12">
                <button type="submit" class="btn btn-primary btn-lg">Edit Product</button>
            </div>
        </form>
    </div>
</section>

<script>
    //first image 

    const imagebox1 = document.getElementById('image-box1')
    const crop_btn1 = document.getElementById('crop-btn1')
    const input1 = document.getElementById('id_image1')

    function viewImage1(event) {
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])

    }

    // When user uploads the image this event will get triggered
    input1.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data1 = input1.files[0]

        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url1 = URL.createObjectURL(img_data1)

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`

        // Storing that cropping view image in a variable
        const image1 = document.getElementById('image1')


        // Displaying the image box
        document.getElementById('image-box1').style.display = 'block'
        // Displaying the Crop buttton
        document.getElementById('crop-btn1').style.display = 'block'
        // Hiding the Post button



        const cropper1 = new Cropper(image1, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200,
        })

        // When crop button is clicked this event will get triggered
        crop_btn1.addEventListener('click', () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper1.getCroppedCanvas().toBlob((blob) => {

                // Gets the original image data
                let fileInputElement1 = document.getElementById('id_image1');
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
                // Create a new container

                let container1 = new DataTransfer();
                // Add the cropped image file to the container
                container1.items.add(file1);
                // Replace the original image file with the new cropped image file
                fileInputElement1.files = container1.files;
                document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
                // Hide the cropper box
                document.getElementById('image-box1').style.display = 'none'
                // Hide the crop button
                document.getElementById('crop-btn1').style.display = 'none'
            })
        })
    })

    //second image

    function viewImage2(event) {
        document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])

    }



    const imagebox2 = document.getElementById('image-box2')
    const crop_btn2 = document.getElementById('crop-btn2')
    const input2 = document.getElementById('id_image2')

    // When user uploads the image this event will get triggered
    input2.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data2 = input2.files[0]

        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url2 = URL.createObjectURL(img_data2)

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`

        // Storing that cropping view image in a variable
        const image2 = document.getElementById('image2')


        // Displaying the image box
        document.getElementById('image-box2').style.display = 'block'
        // Displaying the Crop buttton
        document.getElementById('crop-btn2').style.display = 'block'
        // Hiding the Post button



        const cropper2 = new Cropper(image2, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200,
        })

        // When crop button is clicked this event will get triggered
        crop_btn2.addEventListener('click', () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper2.getCroppedCanvas().toBlob((blob) => {

                // Gets the original image data
                let fileInputElement2 = document.getElementById('id_image2');
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
                // Create a new container

                let container2 = new DataTransfer();
                // Add the cropped image file to the container
                container2.items.add(file2);
                // Replace the original image file with the new cropped image file
                fileInputElement2.files = container2.files;
                document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
                // Hide the cropper box
                document.getElementById('image-box2').style.display = 'none'
                // Hide the crop button
                document.getElementById('crop-btn2').style.display = 'none'
            })
        })
    })

    //Third image

    function viewImage3(event) {
        document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])

    }



    const imagebox3 = document.getElementById('image-box3')
    const crop_btn3 = document.getElementById('crop-btn3')
    const input3 = document.getElementById('id_image3')

    // When user uploads the image this event will get triggered
    input3.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data3 = input3.files[0]

        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url3 = URL.createObjectURL(img_data3)

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`

        // Storing that cropping view image in a variable
        const image3 = document.getElementById('image3')


        // Displaying the image box
        document.getElementById('image-box3').style.display = 'block'
        // Displaying the Crop buttton
        document.getElementById('crop-btn3').style.display = 'block'
        // Hiding the Post button



        const cropper3 = new Cropper(image3, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200,
        })

        // When crop button is clicked this event will get triggered
        crop_btn3.addEventListener('click', () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper3.getCroppedCanvas().toBlob((blob) => {

                // Gets the original image data
                let fileInputElement3 = document.getElementById('id_image3');
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
                // Create a new container

                let container3 = new DataTransfer();
                // Add the cropped image file to the container
                container3.items.add(file3);
                // Replace the original image file with the new cropped image file
                fileInputElement3.files = container3.files;
                document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
                // Hide the cropper box
                document.getElementById('image-box3').style.display = 'none'
                // Hide the crop button
                document.getElementById('crop-btn3').style.display = 'none'
            })
        })
    })

    //fourth image

    function viewImage4(event) {
        document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])

    }



    const imagebox4 = document.getElementById('image-box4')
    const crop_btn4 = document.getElementById('crop-btn4')
    const input4 = document.getElementById('id_image4')

    // When user uploads the image this event will get triggered
    input4.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data4 = input4.files[0]

        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url4 = URL.createObjectURL(img_data4)

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox4.innerHTML = `<img src="${url4}" id="image4" style="width:100%;">`

        // Storing that cropping view image in a variable
        const image4 = document.getElementById('image4')

        // Displaying the image box
        document.getElementById('image-box4').style.display = 'block'
        // Displaying the Crop buttton
        document.getElementById('crop-btn4').style.display = 'block'
        // Hiding the Post button



        const cropper4 = new Cropper(image4, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200,
        })

        // When crop button is clicked this event will get triggered
        crop_btn4.addEventListener('click', () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper4.getCroppedCanvas().toBlob((blob) => {

                // Gets the original image data
                let fileInputElement4 = document.getElementById('id_image4');
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file4 = new File([blob], img_data4.name, { type: "image/*", lastModified: new Date().getTime() });
                // Create a new container

                let container4 = new DataTransfer();
                // Add the cropped image file to the container
                container4.items.add(file4);
                // Replace the original image file with the new cropped image file
                fileInputElement4.files = container4.files;
                document.getElementById('imgView4').src = URL.createObjectURL(fileInputElement4.files[0])
                // Hide the cropper box
                document.getElementById('image-box4').style.display = 'none'
                // Hide the crop button
                document.getElementById('crop-btn4').style.display = 'none'
            })
        })
    })



    var inputBox = document.getElementById("inputBox");

    var invalidChars = [
        "-",
        "+",
        "e",
    ];

    inputBox.addEventListener("keypress", function (e) {
        if (invalidChars.includes(e.key)) {
            e.preventDefault();
        }
    });
</script>